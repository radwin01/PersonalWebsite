{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport TableCell from './TableCell';\nvar ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n};\n\nvar TextTableCell = function (_PureComponent) {\n  _inherits(TextTableCell, _PureComponent);\n\n  function TextTableCell() {\n    _classCallCheck(this, TextTableCell);\n\n    return _possibleConstructorReturn(this, (TextTableCell.__proto__ || Object.getPrototypeOf(TextTableCell)).apply(this, arguments));\n  }\n\n  _createClass(TextTableCell, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          textProps = _props.textProps,\n          isNumber = _props.isNumber,\n          props = _objectWithoutProperties(_props, ['children', 'textProps', 'isNumber']);\n\n      return React.createElement(TableCell, props, React.createElement(Text, _extends({\n        size: 300,\n        flex: '1'\n      }, ellipsis, isNumber ? {\n        textAlign: 'right',\n        fontFamily: 'mono'\n      } : {}, textProps), children));\n    }\n  }]);\n\n  return TextTableCell;\n}(PureComponent);\n\nTextTableCell.propTypes = _extends({}, TableCell.propTypes, {\n  /**\n   * Adds textAlign: right and fontFamily: mono.\n   */\n  isNumber: PropTypes.bool.isRequired,\n\n  /**\n   * Pass additional props to the Text component.\n   */\n  textProps: PropTypes.shape(PropTypes.object)\n});\nTextTableCell.defaultProps = {\n  isNumber: false\n};\nexport default TextTableCell;","map":{"version":3,"sources":["../../../src/table/src/TextTableCell.js"],"names":["ellipsis","overflow","textOverflow","whiteSpace","TextTableCell","PureComponent","propTypes","TableCell","isNumber","PropTypes","isRequired","textProps","defaultProps","children","props","textAlign","fontFamily"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AAEA,IAAMA,QAAAA,GAAW;AACfC,EAAAA,QAAAA,EADe,QAAA;AAEfC,EAAAA,YAAAA,EAFe,UAAA;AAGfC,EAAAA,UAAAA,EAAY;AAHG,CAAjB;;IAMqBC,a;;;;;;;;;;;6BAsBV;AAAA,UAAA,MAAA,GAC6C,KAD7C,KAAA;AAAA,UACCS,QADD,GAAA,MAAA,CAAA,QAAA;AAAA,UACWF,SADX,GAAA,MAAA,CAAA,SAAA;AAAA,UACsBH,QADtB,GAAA,MAAA,CAAA,QAAA;AAAA,UACmCM,KADnC,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,CAAA,CAAA;;AAEP,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,IAAA,EADF,GAAA;AAEE,QAAA,IAAA,EAAK;AAFP,OAAA,EAAA,QAAA,EAIO,QAAA,GACD;AACEC,QAAAA,SAAAA,EADF,OAAA;AAEEC,QAAAA,UAAAA,EAAY;AAFd,OADC,GAJP,EAAA,EAAA,SAAA,CAAA,EAYGH,QAZH,CADF,CADF;AAkBD;;;;EA1CwCR,a;;AAAtBD,a,CACZE,SADYF,G,aAKdG,SAAAA,CAAUD,S;AAEb;;;AAGAE,EAAAA,QAAAA,EAAUC,SAAAA,CAAAA,IAAAA,CAAeC,U;;AAEzB;;;AAGAC,EAAAA,SAAAA,EAAWF,SAAAA,CAAAA,KAAAA,CAAgBA,SAAAA,CAAhBA,MAAAA;EAfML;AAAAA,a,CAkBZQ,YAlBYR,GAkBG;AACpBI,EAAAA,QAAAA,EAAU;AADU,CAlBHJ;eAAAA,a","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport TableCell from './TableCell'\n\nconst ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}\n\nexport default class TextTableCell extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableCell component as the base.\n     */\n    ...TableCell.propTypes,\n\n    /**\n     * Adds textAlign: right and fontFamily: mono.\n     */\n    isNumber: PropTypes.bool.isRequired,\n\n    /**\n     * Pass additional props to the Text component.\n     */\n    textProps: PropTypes.shape(PropTypes.object)\n  }\n\n  static defaultProps = {\n    isNumber: false\n  }\n\n  render() {\n    const { children, textProps, isNumber, ...props } = this.props\n    return (\n      <TableCell {...props}>\n        <Text\n          size={300}\n          flex=\"1\"\n          {...ellipsis}\n          {...(isNumber\n            ? {\n                textAlign: 'right',\n                fontFamily: 'mono'\n              }\n            : {})}\n          {...textProps}\n        >\n          {children}\n        </Text>\n      </TableCell>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}