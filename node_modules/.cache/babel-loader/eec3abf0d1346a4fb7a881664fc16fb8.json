{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = expandAliases;\n\nvar _enhancers = require('./enhancers');\n/**\n * Expands aliases like `margin` to `marginTop`, `marginBottom`, `marginLeft` and `marginRight`.\n *\n * This prevents edge cases where longhand properties can't override shorthand\n * properties due to the style insertion order.\n */\n\n\nfunction expandAliases(props) {\n  var propNames = Object.keys(props); // Use a Map because it's faster for setting values and looping over than an Object\n\n  var newProps = new Map();\n\n  for (var i = 0; i < propNames.length; i++) {\n    var propName = propNames[i];\n    var propValue = props[propName];\n    var aliases = _enhancers.propAliases[propName] || [propName]; // Check that the alias has a valid value in development\n\n    if (process.env.NODE_ENV !== 'production') {\n      var validator = _enhancers.propValidators[propName];\n\n      if (validator) {\n        var result = validator(propValue);\n\n        if (result) {\n          throw new Error('\\uD83D\\uDCE6 ui-box: ' + result);\n        }\n      }\n    } // Expand aliases\n\n\n    for (var _i = 0; _i < aliases.length; _i++) {\n      newProps.set(aliases[_i], propValue);\n    }\n  }\n\n  return newProps;\n}","map":{"version":3,"sources":["../src/expand-aliases.js"],"names":["expandAliases","propNames","Object","newProps","i","propName","propValue","props","aliases","propAliases","process","validator","propValidators","result"],"mappings":";;;;;kBAQwBA,a;;AARxB,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;;AAMe,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC3C,MAAMC,SAAAA,GAAYC,MAAAA,CAAAA,IAAAA,CAAlB,KAAkBA,CAAlB,CAD2C,CAE3C;;AACA,MAAMC,QAAAA,GAAW,IAAjB,GAAiB,EAAjB;;AAEA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIH,SAAAA,CAApB,MAAA,EAAsCG,CAAtC,EAAA,EAA2C;AACzC,QAAMC,QAAAA,GAAWJ,SAAAA,CAAjB,CAAiBA,CAAjB;AACA,QAAMK,SAAAA,GAAYC,KAAAA,CAAlB,QAAkBA,CAAlB;AACA,QAAMC,OAAAA,GAAUC,UAAAA,CAAAA,WAAAA,CAAAA,QAAAA,KAAyB,CAAzC,QAAyC,CAAzC,CAHyC,CAKzC;;AACA,QAAIC,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,UAAMC,SAAAA,GAAYC,UAAAA,CAAAA,cAAAA,CAAlB,QAAkBA,CAAlB;;AACA,UAAA,SAAA,EAAe;AACb,YAAMC,MAAAA,GAASF,SAAAA,CAAf,SAAeA,CAAf;;AACA,YAAA,MAAA,EAAY;AACV,gBAAM,IAAA,KAAA,CAAA,0BAAN,MAAM,CAAN;AACD;AACF;AACF,KAdwC,CAgBzC;;;AACA,SAAK,IAAIP,EAAAA,GAAT,CAAA,EAAgBA,EAAAA,GAAII,OAAAA,CAApB,MAAA,EAAoCJ,EAApC,EAAA,EAAyC;AACvCD,MAAAA,QAAAA,CAAAA,GAAAA,CAAaK,OAAAA,CAAbL,EAAaK,CAAbL,EAAAA,SAAAA;AACD;AACF;;AAED,SAAA,QAAA;AACD","sourcesContent":["import {propAliases, propValidators} from './enhancers'\n\n/**\n * Expands aliases like `margin` to `marginTop`, `marginBottom`, `marginLeft` and `marginRight`.\n *\n * This prevents edge cases where longhand properties can't override shorthand\n * properties due to the style insertion order.\n */\nexport default function expandAliases(props) {\n  const propNames = Object.keys(props)\n  // Use a Map because it's faster for setting values and looping over than an Object\n  const newProps = new Map()\n\n  for (let i = 0; i < propNames.length; i++) {\n    const propName = propNames[i]\n    const propValue = props[propName]\n    const aliases = propAliases[propName] || [propName]\n\n    // Check that the alias has a valid value in development\n    if (process.env.NODE_ENV !== 'production') {\n      const validator = propValidators[propName]\n      if (validator) {\n        const result = validator(propValue)\n        if (result) {\n          throw new Error(`ðŸ“¦ ui-box: ${result}`)\n        }\n      }\n    }\n\n    // Expand aliases\n    for (let i = 0; i < aliases.length; i++) {\n      newProps.set(aliases[i], propValue)\n    }\n  }\n\n  return newProps\n}\n"]},"metadata":{},"sourceType":"script"}