{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { TextInput } from '../../text-input';\nimport { IconButton } from '../../buttons';\n\nvar Combobox = function (_PureComponent) {\n  _inherits(Combobox, _PureComponent);\n\n  function Combobox(props, context) {\n    _classCallCheck(this, Combobox);\n\n    var _this = _possibleConstructorReturn(this, (Combobox.__proto__ || Object.getPrototypeOf(Combobox)).call(this, props, context));\n\n    _this.handleStateChange = function (changes) {\n      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n        if (!changes.isOpen) {\n          _this.setState({\n            isOpenedByButton: false\n          });\n        }\n      }\n    };\n\n    _this.state = {\n      isOpenedByButton: false\n    };\n    return _this;\n  }\n\n  _createClass(Combobox, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          items = _props.items,\n          selectedItem = _props.selectedItem,\n          defaultSelectedItem = _props.defaultSelectedItem,\n          itemToString = _props.itemToString,\n          width = _props.width,\n          height = _props.height,\n          onChange = _props.onChange,\n          inputProps = _props.inputProps,\n          buttonProps = _props.buttonProps,\n          openOnFocus = _props.openOnFocus,\n          autocompleteProps = _props.autocompleteProps,\n          props = _objectWithoutProperties(_props, ['items', 'selectedItem', 'defaultSelectedItem', 'itemToString', 'width', 'height', 'onChange', 'inputProps', 'buttonProps', 'openOnFocus', 'autocompleteProps']);\n\n      return React.createElement(Autocomplete, _extends({\n        items: items,\n        selectedItem: selectedItem,\n        defaultSelectedItem: defaultSelectedItem,\n        itemToString: itemToString,\n        onChange: onChange,\n        onStateChange: this.handleStateChange,\n        isFilterDisabled: this.state.isOpenedByButton\n      }, autocompleteProps), function (_ref) {\n        var key = _ref.key,\n            getRef = _ref.getRef,\n            isOpen = _ref.isOpen,\n            openMenu = _ref.openMenu,\n            inputValue = _ref.inputValue,\n            getInputProps = _ref.getInputProps,\n            getButtonProps = _ref.getButtonProps,\n            clearSelection = _ref.clearSelection;\n        return React.createElement(Box, _extends({\n          key: key,\n          innerRef: function innerRef(ref) {\n            return getRef(ref);\n          },\n          display: 'inline-flex',\n          width: width\n        }, props), React.createElement(TextInput, _extends({\n          width: 0,\n          flex: 1,\n          height: height,\n          value: inputValue,\n          borderTopRightRadius: 0,\n          borderBottomRightRadius: 0\n        }, getInputProps(_extends({}, inputProps, {\n          onFocus: function onFocus() {\n            if (openOnFocus) openMenu();\n          },\n          onChange: function onChange(e) {\n            if (_this2.state.isOpenedByButton) {\n              _this2.setState({\n                isOpenedByButton: false\n              });\n            }\n\n            if (e.target.value.trim() === '') {\n              // Prevent the selected item from sticking around\n              clearSelection();\n            }\n          }\n        })))), React.createElement(IconButton, _extends({\n          iconAim: isOpen ? 'up' : 'down',\n          color: 'muted',\n          icon: 'triangle',\n          height: height,\n          marginLeft: -1,\n          paddingLeft: 0,\n          paddingRight: 0,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0\n        }, getButtonProps(_extends({}, buttonProps, {\n          onClick: function onClick() {\n            if (!isOpen) {\n              _this2.setState({\n                isOpenedByButton: true\n              });\n            }\n          }\n        })))));\n      });\n    }\n  }]);\n\n  return Combobox;\n}(PureComponent);\n\nCombobox.propTypes = _extends({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  items: PropTypes.array.isRequired,\n  selectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  itemToString: PropTypes.func,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.number,\n  onChange: PropTypes.func,\n  inputProps: PropTypes.object,\n  buttonProps: PropTypes.object,\n  openOnFocus: PropTypes.bool,\n  autocompleteProps: PropTypes.object\n});\nCombobox.defaultProps = {\n  openOnFocus: false,\n  width: 224\n};\nexport default Combobox;","map":{"version":3,"sources":["../../../src/combobox/src/Combobox.js"],"names":["Combobox","PureComponent","propTypes","dimensions","spacing","position","layout","items","PropTypes","isRequired","selectedItem","any","defaultSelectedItem","itemToString","func","width","height","number","onChange","inputProps","object","buttonProps","openOnFocus","bool","autocompleteProps","defaultProps","isOpenedByButton","Object","changes","props","key","getRef","isOpen","openMenu","inputValue","getInputProps","getButtonProps","clearSelection","onFocus","e","onClick"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { dimensions, spacing, position, layout } from 'ui-box'\nimport { Autocomplete } from '../../autocomplete'\nimport { TextInput } from '../../text-input'\nimport { IconButton } from '../../buttons'\n\nexport default class Combobox extends PureComponent {\n  static propTypes = {\n    ...dimensions.propTypes,\n    ...spacing.propTypes,\n    ...position.propTypes,\n    ...layout.propTypes,\n    items: PropTypes.array.isRequired,\n    selectedItem: PropTypes.any,\n    defaultSelectedItem: PropTypes.any,\n    itemToString: PropTypes.func,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.number,\n    onChange: PropTypes.func,\n    inputProps: PropTypes.object,\n    buttonProps: PropTypes.object,\n    openOnFocus: PropTypes.bool,\n    autocompleteProps: PropTypes.object\n  }\n\n  static defaultProps = {\n    openOnFocus: false,\n    width: 224\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n      isOpenedByButton: false\n    }\n  }\n\n  handleStateChange = changes => {\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n      if (!changes.isOpen) {\n        this.setState({ isOpenedByButton: false })\n      }\n    }\n  }\n\n  render() {\n    const {\n      items,\n      selectedItem,\n      defaultSelectedItem,\n      itemToString,\n      width,\n      height,\n      onChange,\n      inputProps,\n      buttonProps,\n      openOnFocus,\n      autocompleteProps,\n      ...props\n    } = this.props\n\n    return (\n      <Autocomplete\n        items={items}\n        selectedItem={selectedItem}\n        defaultSelectedItem={defaultSelectedItem}\n        itemToString={itemToString}\n        onChange={onChange}\n        onStateChange={this.handleStateChange}\n        isFilterDisabled={this.state.isOpenedByButton}\n        {...autocompleteProps}\n      >\n        {({\n          key,\n          getRef,\n          isOpen,\n          openMenu,\n          inputValue,\n          getInputProps,\n          getButtonProps,\n          clearSelection\n        }) => (\n          <Box\n            key={key}\n            innerRef={ref => getRef(ref)}\n            display=\"inline-flex\"\n            width={width}\n            {...props}\n          >\n            <TextInput\n              width={0}\n              flex={1}\n              height={height}\n              value={inputValue}\n              borderTopRightRadius={0}\n              borderBottomRightRadius={0}\n              {...getInputProps({\n                ...inputProps,\n                onFocus: () => {\n                  if (openOnFocus) openMenu()\n                },\n                onChange: e => {\n                  if (this.state.isOpenedByButton) {\n                    this.setState({\n                      isOpenedByButton: false\n                    })\n                  }\n                  if (e.target.value.trim() === '') {\n                    // Prevent the selected item from sticking around\n                    clearSelection()\n                  }\n                }\n              })}\n            />\n            <IconButton\n              iconAim={isOpen ? 'up' : 'down'}\n              color=\"muted\"\n              icon=\"triangle\"\n              height={height}\n              marginLeft={-1}\n              paddingLeft={0}\n              paddingRight={0}\n              borderTopLeftRadius={0}\n              borderBottomLeftRadius={0}\n              {...getButtonProps({\n                ...buttonProps,\n                onClick: () => {\n                  if (!isOpen) {\n                    this.setState({ isOpenedByButton: true })\n                  }\n                }\n              })}\n            />\n          </Box>\n        )}\n      </Autocomplete>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}