{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/jsx-handler-names */\n\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport ScrollbarSize from './ScrollbarSize';\n\nvar TableHead = function (_PureComponent) {\n  _inherits(TableHead, _PureComponent);\n\n  function TableHead() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TableHead);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableHead.__proto__ || Object.getPrototypeOf(TableHead)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      scrollbarWidth: 0\n    }, _this.handleScrollbarSize = function (width) {\n      _this.setState({\n        scrollbarWidth: width\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TableHead, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          accountForScrollbar = _props.accountForScrollbar,\n          props = _objectWithoutProperties(_props, ['children', 'accountForScrollbar']);\n\n      var scrollbarWidth = this.state.scrollbarWidth;\n      return React.createElement(Pane, _extends({\n        paddingRight: scrollbarWidth\n      }, props), children, ' ', accountForScrollbar && React.createElement(ScrollbarSize, {\n        handleScrollbarSize: this.handleScrollbarSize\n      }));\n    }\n  }]);\n\n  return TableHead;\n}(PureComponent);\n\nTableHead.propTypes = _extends({}, Pane.propTypes, {\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n});\nTableHead.defaultProps = {\n  accountForScrollbar: true,\n  boxSizing: 'border-box',\n  display: 'flex',\n  appearance: 'tint2',\n  borderBottom: 'extraMuted'\n};\nexport default TableHead;","map":{"version":3,"sources":["../../../src/table/src/TableHead.js"],"names":["TableHead","PureComponent","propTypes","Pane","accountForScrollbar","PropTypes","bool","state","scrollbarWidth","defaultProps","boxSizing","display","appearance","borderBottom","handleScrollbarSize","width","children","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,OAAA,aAAA,MAAA,iBAAA;;IAEqBA,S;;;;;;;;;;;;;;4LAcnBO,K,GAAQ;AACNC,MAAAA,cAAAA,EAAgB;AADV,K,QAYRM,mB,GAAsB,UAAA,KAAA,EAAS;AAC7B,MAAA,KAAA,CAAA,QAAA,CAAc;AACZN,QAAAA,cAAAA,EAAgBO;AADJ,OAAd;;;;;;6BAKO;AAAA,UAAA,MAAA,GAC6C,KAD7C,KAAA;AAAA,UACCC,QADD,GAAA,MAAA,CAAA,QAAA;AAAA,UACWZ,mBADX,GAAA,MAAA,CAAA,mBAAA;AAAA,UACmCa,KADnC,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,UAAA,EAAA,qBAAA,CAAA,CAAA;;AAAA,UAECT,cAFD,GAEoB,KAFpB,KAEoB,CAFpB,cAAA;AAIP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,YAAA,EAAN;AAAA,OAAA,EAAA,KAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAEGJ,mBAAAA,IACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,QAAA,mBAAA,EAAqB,KAApC;AAAA,OAAA,CAHJ,CADF;AAQD;;;;EA5CoCH,a;;AAAlBD,S,CACZE,SADYF,G,aAKdG,IAAAA,CAAKD,S;AAER;;;;AAIAE,EAAAA,mBAAAA,EAAqBC,SAAAA,CAAUC;EAXdN;AAAAA,S,CAkBZS,YAlBYT,GAkBG;AACpBI,EAAAA,mBAAAA,EADoB,IAAA;AAEpBM,EAAAA,SAAAA,EAFoB,YAAA;AAGpBC,EAAAA,OAAAA,EAHoB,MAAA;AAIpBC,EAAAA,UAAAA,EAJoB,OAAA;AAKpBC,EAAAA,YAAAA,EAAc;AALM,CAlBHb;eAAAA,S","sourcesContent":["/* eslint-disable react/jsx-handler-names */\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport ScrollbarSize from './ScrollbarSize'\n\nexport default class TableHead extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Pane component as the base.\n     */\n    ...Pane.propTypes,\n\n    /**\n     * This should always be true if you are using TableHead together with a TableBody.\n     * Because TableBody has `overflowY: scroll` by default.\n     */\n    accountForScrollbar: PropTypes.bool\n  }\n\n  state = {\n    scrollbarWidth: 0\n  }\n\n  static defaultProps = {\n    accountForScrollbar: true,\n    boxSizing: 'border-box',\n    display: 'flex',\n    appearance: 'tint2',\n    borderBottom: 'extraMuted'\n  }\n\n  handleScrollbarSize = width => {\n    this.setState({\n      scrollbarWidth: width\n    })\n  }\n\n  render() {\n    const { children, accountForScrollbar, ...props } = this.props\n    const { scrollbarWidth } = this.state\n\n    return (\n      <Pane paddingRight={scrollbarWidth} {...props}>\n        {children}{' '}\n        {accountForScrollbar && (\n          <ScrollbarSize handleScrollbarSize={this.handleScrollbarSize} />\n        )}\n      </Pane>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}