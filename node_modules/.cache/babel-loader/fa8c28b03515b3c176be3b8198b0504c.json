{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { css } from 'ui-box';\nimport { colors } from '../../colors';\nvar loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n});\nvar loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n});\nvar outer = {\n  animation: loadingKeyframes + ' 2s linear infinite'\n};\nvar inner = {\n  strokeDashoffset: 600,\n  strokeDasharray: 300,\n  strokeWidth: 12,\n  strokeMiterlimit: 10,\n  strokeLinecap: 'round',\n  animation: loadingCircleKeyframes + ' 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite',\n  stroke: colors.neutral['500'],\n  fill: 'transparent'\n};\n\nvar Spinner = function (_PureComponent) {\n  _inherits(Spinner, _PureComponent);\n\n  function Spinner() {\n    _classCallCheck(this, Spinner);\n\n    return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));\n  }\n\n  _createClass(Spinner, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          size = _props.size,\n          props = _objectWithoutProperties(_props, ['size']);\n\n      return React.createElement(Box, _extends({\n        width: size,\n        height: size,\n        lineHeight: 0\n      }, props), React.createElement(Box, {\n        is: 'svg',\n        css: outer,\n        x: '0px',\n        y: '0px',\n        viewBox: '0 0 150 150'\n      }, React.createElement(Box, {\n        is: 'circle',\n        css: inner,\n        cx: '75',\n        cy: '75',\n        r: '60'\n      })));\n    }\n  }]);\n\n  return Spinner;\n}(PureComponent);\n\nSpinner.propTypes = _extends({}, Box.propTypes, {\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number\n});\nSpinner.defaultProps = {\n  size: 40\n};\nexport default Spinner;","map":{"version":3,"sources":["../../../src/spinner/src/Spinner.js"],"names":["loadingKeyframes","transform","loadingCircleKeyframes","strokeDashoffset","outer","animation","inner","strokeDasharray","strokeWidth","strokeMiterlimit","strokeLinecap","stroke","colors","fill","Spinner","PureComponent","propTypes","Box","size","PropTypes","number","defaultProps","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,IAAA,GAAA,QAAA,QAAA;AACA,SAAA,MAAA,QAAA,cAAA;AAEA,IAAMA,gBAAAA,GAAmB,GAAA,CAAA,SAAA,CAAA,SAAA,EAAyB;AAChD,QAAM;AACJC,IAAAA,SAAAA,EAAW;AADP,GAD0C;AAIhD,UAAQ;AACNA,IAAAA,SAAAA,EAAW;AADL;AAJwC,CAAzB,CAAzB;AASA,IAAMC,sBAAAA,GAAyB,GAAA,CAAA,SAAA,CAAA,gBAAA,EAAgC;AAC7D,QAAM;AACJC,IAAAA,gBAAAA,EAAkB;AADd,GADuD;AAI7D,UAAQ;AACNA,IAAAA,gBAAAA,EAAkB;AADZ;AAJqD,CAAhC,CAA/B;AASA,IAAMC,KAAAA,GAAQ;AACZC,EAAAA,SAAAA,EAAcL,gBAAdK,GAAAA;AADY,CAAd;AAIA,IAAMC,KAAAA,GAAQ;AACZH,EAAAA,gBAAAA,EADY,GAAA;AAEZI,EAAAA,eAAAA,EAFY,GAAA;AAGZC,EAAAA,WAAAA,EAHY,EAAA;AAIZC,EAAAA,gBAAAA,EAJY,EAAA;AAKZC,EAAAA,aAAAA,EALY,OAAA;AAMZL,EAAAA,SAAAA,EAAcH,sBAAdG,GANY,mDAAA;AAOZM,EAAAA,MAAAA,EAAQC,MAAAA,CAAAA,OAAAA,CAPI,KAOJA,CAPI;AAQZC,EAAAA,IAAAA,EAAM;AARM,CAAd;;IAWqBC,O;;;;;;;;;;;6BAiBV;AAAA,UAAA,MAAA,GACoB,KADpB,KAAA;AAAA,UACCI,IADD,GAAA,MAAA,CAAA,IAAA;AAAA,UACUI,KADV,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA;;AAEP,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AAAK,QAAA,KAAA,EAAL,IAAA;AAAkB,QAAA,MAAA,EAAlB,IAAA;AAAgC,QAAA,UAAA,EAAhC;AAAA,OAAA,EAAA,KAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,QAAA,EAAA,EAAL,KAAA;AAAc,QAAA,GAAA,EAAd,KAAA;AAA0B,QAAA,CAAA,EAA1B,KAAA;AAAkC,QAAA,CAAA,EAAlC,KAAA;AAA0C,QAAA,OAAA,EAA1C;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,QAAA,EAAA,EAAL,QAAA;AAAiB,QAAA,GAAA,EAAjB,KAAA;AAA6B,QAAA,EAAA,EAA7B,IAAA;AAAqC,QAAA,EAAA,EAArC,IAAA;AAA6C,QAAA,CAAA,EAA7C;AAAA,OAAA,CADF,CADF,CADF;AAOD;;;;EA1BkCP,a;;AAAhBD,O,CACZE,SADYF,G,aAKdG,GAAAA,CAAID,S;AAEP;;;AAGAE,EAAAA,IAAAA,EAAMC,SAAAA,CAAUC;EAVCN;AAAAA,O,CAaZO,YAbYP,GAaG;AACpBI,EAAAA,IAAAA,EAAM;AADc,CAbHJ;eAAAA,O","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { css } from 'ui-box'\nimport { colors } from '../../colors'\n\nconst loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n})\n\nconst loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n})\n\nconst outer = {\n  animation: `${loadingKeyframes} 2s linear infinite`\n}\n\nconst inner = {\n  strokeDashoffset: 600,\n  strokeDasharray: 300,\n  strokeWidth: 12,\n  strokeMiterlimit: 10,\n  strokeLinecap: 'round',\n  animation: `${loadingCircleKeyframes} 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite`,\n  stroke: colors.neutral['500'],\n  fill: 'transparent'\n}\n\nexport default class Spinner extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Box component as the base.\n     */\n    ...Box.propTypes,\n\n    /**\n     * The size of the spinner.\n     */\n    size: PropTypes.number\n  }\n\n  static defaultProps = {\n    size: 40\n  }\n\n  render() {\n    const { size, ...props } = this.props\n    return (\n      <Box width={size} height={size} lineHeight={0} {...props}>\n        <Box is=\"svg\" css={outer} x=\"0px\" y=\"0px\" viewBox=\"0 0 150 150\">\n          <Box is=\"circle\" css={inner} cx=\"75\" cy=\"75\" r=\"60\" />\n        </Box>\n      </Box>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}