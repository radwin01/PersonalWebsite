{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconMap, IconAim } from '../../icons';\nimport { getIconSizeForControlHeight } from '../../shared-styles';\nimport Button from './Button';\n\nvar IconButton = function (_PureComponent) {\n  _inherits(IconButton, _PureComponent);\n\n  function IconButton() {\n    _classCallCheck(this, IconButton);\n\n    return _possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));\n  }\n\n  _createClass(IconButton, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          iconAim = _props.iconAim,\n          iconKey = _props.icon,\n          height = _props.height,\n          props = _objectWithoutProperties(_props, ['iconAim', 'icon', 'height']);\n\n      var icon = IconMap[iconKey];\n      var iconSize = getIconSizeForControlHeight({\n        height: height\n      });\n      return React.createElement(Button, _extends({\n        height: height,\n        paddingLeft: 0,\n        paddingRight: 0\n      }, props), icon && React.createElement(icon, {\n        aim: iconAim,\n        iconSize: iconSize,\n        color: 'inherit',\n        size: height\n      }));\n    }\n  }]);\n\n  return IconButton;\n}(PureComponent);\n\nIconButton.propTypes = _extends({}, Button.propTypes, {\n  /**\n   * The icon to be used. Can be any icon from Evergreen.\n   */\n  icon: PropTypes.oneOf(Object.keys(IconMap)),\n\n  /**\n   * The aim of the icon.\n   */\n  iconAim: PropTypes.oneOf(Object.keys(IconAim)).isRequired\n});\nIconButton.defaultProps = {\n  height: 32,\n  iconAim: 'none'\n};\nexport default IconButton;","map":{"version":3,"sources":["../../../src/buttons/src/IconButton.js"],"names":["IconButton","PureComponent","propTypes","Button","icon","PropTypes","Object","iconAim","isRequired","defaultProps","height","iconKey","props","IconMap","iconSize","getIconSizeForControlHeight","aim","color","size"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,OAAA,EAAA,OAAA,QAAA,aAAA;AACA,SAAA,2BAAA,QAAA,qBAAA;AACA,OAAA,MAAA,MAAA,UAAA;;IAEqBA,U;;;;;;;;;;;6BAuBV;AAAA,UAAA,MAAA,GAC8C,KAD9C,KAAA;AAAA,UACCO,OADD,GAAA,MAAA,CAAA,OAAA;AAAA,UACgBI,OADhB,GAAA,MAAA,CAAA,IAAA;AAAA,UACyBD,MADzB,GAAA,MAAA,CAAA,MAAA;AAAA,UACoCE,KADpC,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,EAAA,QAAA,CAAA,CAAA;;AAEP,UAAMR,IAAAA,GAAOS,OAAAA,CAAb,OAAaA,CAAb;AACA,UAAMC,QAAAA,GAAWC,2BAAAA,CAA4B;AAAEL,QAAAA,MAAAA,EAA/C;AAA6C,OAA5BK,CAAjB;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,QAAA,MAAA,EAAR,MAAA;AAAwB,QAAA,WAAA,EAAxB,CAAA;AAAwC,QAAA,YAAA,EAAxC;AAAA,OAAA,EAAA,KAAA,CAAA,EACGX,IAAAA,IACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAA0B;AACxBY,QAAAA,GAAAA,EADwB,OAAA;AAExBF,QAAAA,QAAAA,EAFwB,QAAA;AAGxBG,QAAAA,KAAAA,EAHwB,SAAA;AAIxBC,QAAAA,IAAAA,EAAMR;AAJkB,OAA1B,CAFJ,CADF;AAWD;;;;EAvCqCT,a;;AAAnBD,U,CACZE,SADYF,G,aAKdG,MAAAA,CAAOD,S;AAEV;;;AAGAE,EAAAA,IAAAA,EAAMC,SAAAA,CAAAA,KAAAA,CAAgBC,MAAAA,CAAAA,IAAAA,CAAhBD,OAAgBC,CAAhBD,C;;AAEN;;;AAGAE,EAAAA,OAAAA,EAASF,SAAAA,CAAAA,KAAAA,CAAgBC,MAAAA,CAAAA,IAAAA,CAAhBD,OAAgBC,CAAhBD,EAAsCG;EAf9BR;AAAAA,U,CAkBZS,YAlBYT,GAkBG;AACpBU,EAAAA,MAAAA,EADoB,EAAA;AAEpBH,EAAAA,OAAAA,EAAS;AAFW,CAlBHP;eAAAA,U","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { IconMap, IconAim } from '../../icons'\nimport { getIconSizeForControlHeight } from '../../shared-styles'\nimport Button from './Button'\n\nexport default class IconButton extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Button component as the base.\n     */\n    ...Button.propTypes,\n\n    /**\n     * The icon to be used. Can be any icon from Evergreen.\n     */\n    icon: PropTypes.oneOf(Object.keys(IconMap)),\n\n    /**\n     * The aim of the icon.\n     */\n    iconAim: PropTypes.oneOf(Object.keys(IconAim)).isRequired\n  }\n\n  static defaultProps = {\n    height: 32,\n    iconAim: 'none'\n  }\n\n  render() {\n    const { iconAim, icon: iconKey, height, ...props } = this.props\n    const icon = IconMap[iconKey]\n    const iconSize = getIconSizeForControlHeight({ height })\n\n    return (\n      <Button height={height} paddingLeft={0} paddingRight={0} {...props}>\n        {icon &&\n          React.createElement(icon, {\n            aim: iconAim,\n            iconSize,\n            color: 'inherit',\n            size: height\n          })}\n      </Button>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}