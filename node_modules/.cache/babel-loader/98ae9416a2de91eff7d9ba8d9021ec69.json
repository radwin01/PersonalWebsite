{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prefixer;\n\nvar _static = require('inline-style-prefixer/static');\n\nvar _static2 = _interopRequireDefault(_static);\n\nvar _decamelize = require('./utils/decamelize');\n\nvar _decamelize2 = _interopRequireDefault(_decamelize);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar prefixRegex = /^(Webkit|ms|Moz|O)/;\n/**\n * Adds vendor prefixes to properties and values.\n */\n\nfunction prefixer(property, value) {\n  var rules = (0, _static2.default)(_defineProperty({}, property, value));\n  var rulesArray = [];\n  var propertyNames = Object.keys(rules); // Convert rules object to an array\n\n  for (var i = 0; i < propertyNames.length; i++) {\n    var propertyName = propertyNames[i]; // Add a dash in front of the prefixes\n\n    var prefixedProp = propertyName.match(prefixRegex) ? '-' + propertyName : propertyName;\n    var prop = (0, _decamelize2.default)(prefixedProp);\n    var values = rules[propertyName]; // Handle prefixed values\n\n    if (Array.isArray(values)) {\n      for (var _i = 0; _i < values.length; _i++) {\n        rulesArray.push({\n          property: prop,\n          value: values[_i]\n        });\n      }\n    } else {\n      rulesArray.push({\n        property: prop,\n        value: values\n      });\n    }\n  }\n\n  return rulesArray;\n}","map":{"version":3,"sources":["../src/prefixer.js"],"names":["prefixRegex","prefixer","rules","rulesArray","propertyNames","Object","i","propertyName","prefixedProp","prop","values","Array","property","value"],"mappings":";;;;;kBAQwBC,Q;;AARxB,IAAA,OAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMD,WAAAA,GAAN,oBAAA;AAEA;;;;AAGe,SAAA,QAAA,CAAA,QAAA,EAAA,KAAA,EAAmC;AAChD,MAAME,KAAAA,GAAQ,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,eAAA,CAAA,EAAA,EAAA,QAAA,EAAd,KAAc,CAAA,CAAd;AACA,MAAMC,UAAAA,GAAN,EAAA;AACA,MAAMC,aAAAA,GAAgBC,MAAAA,CAAAA,IAAAA,CAAtB,KAAsBA,CAAtB,CAHgD,CAKhD;;AACA,OAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIF,aAAAA,CAApB,MAAA,EAA0CE,CAA1C,EAAA,EAA+C;AAC7C,QAAMC,YAAAA,GAAeH,aAAAA,CAArB,CAAqBA,CAArB,CAD6C,CAE7C;;AACA,QAAMI,YAAAA,GAAeD,YAAAA,CAAAA,KAAAA,CAAAA,WAAAA,IAAAA,MAAAA,YAAAA,GAArB,YAAA;AAGA,QAAME,IAAAA,GAAO,CAAA,GAAA,YAAA,CAAA,OAAA,EAAb,YAAa,CAAb;AACA,QAAMC,MAAAA,GAASR,KAAAA,CAAf,YAAeA,CAAf,CAP6C,CAS7C;;AACA,QAAIS,KAAAA,CAAAA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzB,WAAK,IAAIL,EAAAA,GAAT,CAAA,EAAgBA,EAAAA,GAAII,MAAAA,CAApB,MAAA,EAAmCJ,EAAnC,EAAA,EAAwC;AACtCH,QAAAA,UAAAA,CAAAA,IAAAA,CAAgB;AAACS,UAAAA,QAAAA,EAAD,IAAA;AAAiBC,UAAAA,KAAAA,EAAOH,MAAAA,CAAxCP,EAAwCO;AAAxB,SAAhBP;AACD;AAHH,KAAA,MAIO;AACLA,MAAAA,UAAAA,CAAAA,IAAAA,CAAgB;AAACS,QAAAA,QAAAA,EAAD,IAAA;AAAiBC,QAAAA,KAAAA,EAAjCV;AAAgB,OAAhBA;AACD;AACF;;AAED,SAAA,UAAA;AACD","sourcesContent":["import prefixAll from 'inline-style-prefixer/static'\nimport decamelize from './utils/decamelize'\n\nconst prefixRegex = /^(Webkit|ms|Moz|O)/\n\n/**\n * Adds vendor prefixes to properties and values.\n */\nexport default function prefixer(property, value) {\n  const rules = prefixAll({[property]: value})\n  const rulesArray = []\n  const propertyNames = Object.keys(rules)\n\n  // Convert rules object to an array\n  for (let i = 0; i < propertyNames.length; i++) {\n    const propertyName = propertyNames[i]\n    // Add a dash in front of the prefixes\n    const prefixedProp = propertyName.match(prefixRegex)\n      ? `-${propertyName}`\n      : propertyName\n    const prop = decamelize(prefixedProp)\n    const values = rules[propertyName]\n\n    // Handle prefixed values\n    if (Array.isArray(values)) {\n      for (let i = 0; i < values.length; i++) {\n        rulesArray.push({property: prop, value: values[i]})\n      }\n    } else {\n      rulesArray.push({property: prop, value: values})\n    }\n  }\n\n  return rulesArray\n}\n"]},"metadata":{},"sourceType":"script"}