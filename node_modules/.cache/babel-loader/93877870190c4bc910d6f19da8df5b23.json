{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.get = get;\nexports.set = set;\nexports.entries = entries;\nexports.hydrate = hydrate;\nexports.clear = clear;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar cache = new Map();\n\nfunction get(property, value) {\n  return cache.get(property + value);\n}\n\nfunction set(property, value, className) {\n  if (process.env.NODE_ENV !== 'production') {\n    var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n    if (valueType !== 'boolean' && valueType !== 'number' && valueType !== 'string') {\n      var encodedValue = JSON.stringify(value);\n      throw new TypeError('\\uD83D\\uDCE6 ui-box: invalid cache value \\u201C' + encodedValue + '\\u201D. Only booleans, numbers and strings are supported.');\n    }\n  }\n\n  cache.set(property + value, className);\n}\n\nfunction entries() {\n  return [].concat(_toConsumableArray(cache));\n}\n\nfunction hydrate(newEntries) {\n  cache = new Map([].concat(_toConsumableArray(cache), _toConsumableArray(newEntries)));\n}\n\nfunction clear() {\n  cache.clear();\n}","map":{"version":3,"sources":["../src/cache.js"],"names":["cache","get","property","set","process","valueType","encodedValue","JSON","entries","hydrate","clear"],"mappings":";;;;;;;;;;;;QAEgBC,G,GAAAA,G;QAIAE,G,GAAAA,G;QAkBAK,O,GAAAA,O;QAIAC,O,GAAAA,O;QAIAC,K,GAAAA,K;;;;;;;;;;;;;;AAhChB,IAAIV,KAAAA,GAAQ,IAAZ,GAAY,EAAZ;;AAEO,SAAA,GAAA,CAAA,QAAA,EAAA,KAAA,EAA8B;AACnC,SAAOA,KAAAA,CAAAA,GAAAA,CAAUE,QAAAA,GAAjB,KAAOF,CAAP;AACD;;AAEM,SAAA,GAAA,CAAA,QAAA,EAAA,KAAA,EAAA,SAAA,EAAyC;AAC9C,MAAII,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,QAAMC,SAAAA,GAAAA,OAAAA,KAAAA,KAAAA,WAAAA,GAAAA,WAAAA,GAAAA,OAAAA,CAAN,KAAMA,CAAN;;AACA,QACEA,SAAAA,KAAAA,SAAAA,IACAA,SAAAA,KADAA,QAAAA,IAEAA,SAAAA,KAHF,QAAA,EAIE;AACA,UAAMC,YAAAA,GAAeC,IAAAA,CAAAA,SAAAA,CAArB,KAAqBA,CAArB;AACA,YAAM,IAAA,SAAA,CAAA,oDAAA,YAAA,GAAN,2DAAM,CAAN;AAGD;AACF;;AAEDP,EAAAA,KAAAA,CAAAA,GAAAA,CAAUE,QAAAA,GAAVF,KAAAA,EAAAA,SAAAA;AACD;;AAEM,SAAA,OAAA,GAAmB;AACxB,SAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,CAAA;AACD;;AAEM,SAAA,OAAA,CAAA,UAAA,EAA6B;AAClCA,EAAAA,KAAAA,GAAQ,IAAA,GAAA,CAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,CAARA,UAAQ,CAAA,CAAA,CAARA;AACD;;AAEM,SAAA,KAAA,GAAiB;AACtBA,EAAAA,KAAAA,CAAAA,KAAAA;AACD","sourcesContent":["let cache = new Map()\n\nexport function get(property, value) {\n  return cache.get(property + value)\n}\n\nexport function set(property, value, className) {\n  if (process.env.NODE_ENV !== 'production') {\n    const valueType = typeof value\n    if (\n      valueType !== 'boolean' &&\n      valueType !== 'number' &&\n      valueType !== 'string'\n    ) {\n      const encodedValue = JSON.stringify(value)\n      throw new TypeError(\n        `📦 ui-box: invalid cache value “${encodedValue}”. Only booleans, numbers and strings are supported.`\n      )\n    }\n  }\n\n  cache.set(property + value, className)\n}\n\nexport function entries() {\n  return [...cache]\n}\n\nexport function hydrate(newEntries) {\n  cache = new Map([...cache, ...newEntries])\n}\n\nexport function clear() {\n  cache.clear()\n}\n"]},"metadata":{},"sourceType":"script"}