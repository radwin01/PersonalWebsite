{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Strong } from '../../typography';\nimport { FillAppearances } from '../../shared-styles';\n\nvar Badge = function (_PureComponent) {\n  _inherits(Badge, _PureComponent);\n\n  function Badge() {\n    _classCallCheck(this, Badge);\n\n    return _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));\n  }\n\n  _createClass(Badge, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          appearance = _props.appearance,\n          isSolid = _props.isSolid,\n          props = _objectWithoutProperties(_props, ['appearance', 'isSolid']);\n\n      var opacity = isSolid ? 'solid' : 'default';\n      var appearanceStyle = FillAppearances[opacity][appearance];\n      return React.createElement(Strong, _extends({\n        size: 300\n      }, Badge.styles, appearanceStyle, props));\n    }\n  }]);\n\n  return Badge;\n}(PureComponent);\n\nBadge.propTypes = _extends({}, Strong.propTypes, {\n  appearance: PropTypes.oneOf(Object.keys(FillAppearances.default)).isRequired\n});\nBadge.defaultProps = {\n  appearance: 'neutral',\n  isSolid: false\n};\nBadge.styles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  height: 16,\n  paddingTop: 0,\n  paddingRight: 6,\n  paddingBottom: 0,\n  paddingLeft: 6,\n  borderRadius: 2,\n  textAlign: 'center',\n  textDecoration: 'none',\n  textTransform: 'uppercase'\n};\nexport default Badge;","map":{"version":3,"sources":["../../../src/badges/src/Badge.js"],"names":["Badge","PureComponent","propTypes","Strong","appearance","PropTypes","Object","FillAppearances","isRequired","defaultProps","isSolid","styles","display","boxSizing","height","paddingTop","paddingRight","paddingBottom","paddingLeft","borderRadius","textAlign","textDecoration","textTransform","props","opacity","appearanceStyle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,eAAA,QAAA,qBAAA;;IAEqBA,K;;;;;;;;;;;6BAyBV;AAAA,UAAA,MAAA,GACmC,KADnC,KAAA;AAAA,UACCI,UADD,GAAA,MAAA,CAAA,UAAA;AAAA,UACaM,OADb,GAAA,MAAA,CAAA,OAAA;AAAA,UACyBa,KADzB,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,YAAA,EAAA,SAAA,CAAA,CAAA;;AAEP,UAAMC,OAAAA,GAAUd,OAAAA,GAAAA,OAAAA,GAAhB,SAAA;AACA,UAAMe,eAAAA,GAAkBlB,eAAAA,CAAAA,OAAAA,CAAAA,CAAxB,UAAwBA,CAAxB;AACA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,QAAA,IAAA,EAAR;AAAA,OAAA,EAAuBP,KAAAA,CAAvB,MAAA,EAAA,eAAA,EADF,KACE,CAAA,CADF;AAGD;;;;EAhCgCC,a;;AAAdD,K,CACZE,SADYF,G,aAEdG,MAAAA,CAAOD,S;AACVE,EAAAA,UAAAA,EAAYC,SAAAA,CAAAA,KAAAA,CAAgBC,MAAAA,CAAAA,IAAAA,CAAYC,eAAAA,CAA5BF,OAAgBC,CAAhBD,EAAsDG;EAHjDR;AAAAA,K,CAMZS,YANYT,GAMG;AACpBI,EAAAA,UAAAA,EADoB,SAAA;AAEpBM,EAAAA,OAAAA,EAAS;AAFW,CANHV;AAAAA,K,CAWZW,MAXYX,GAWH;AACdY,EAAAA,OAAAA,EADc,cAAA;AAEdC,EAAAA,SAAAA,EAFc,YAAA;AAGdC,EAAAA,MAAAA,EAHc,EAAA;AAIdC,EAAAA,UAAAA,EAJc,CAAA;AAKdC,EAAAA,YAAAA,EALc,CAAA;AAMdC,EAAAA,aAAAA,EANc,CAAA;AAOdC,EAAAA,WAAAA,EAPc,CAAA;AAQdC,EAAAA,YAAAA,EARc,CAAA;AASdC,EAAAA,SAAAA,EATc,QAAA;AAUdC,EAAAA,cAAAA,EAVc,MAAA;AAWdC,EAAAA,aAAAA,EAAe;AAXD,CAXGtB;eAAAA,K","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Strong } from '../../typography'\nimport { FillAppearances } from '../../shared-styles'\n\nexport default class Badge extends PureComponent {\n  static propTypes = {\n    ...Strong.propTypes,\n    appearance: PropTypes.oneOf(Object.keys(FillAppearances.default)).isRequired\n  }\n\n  static defaultProps = {\n    appearance: 'neutral',\n    isSolid: false\n  }\n\n  static styles = {\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    height: 16,\n    paddingTop: 0,\n    paddingRight: 6,\n    paddingBottom: 0,\n    paddingLeft: 6,\n    borderRadius: 2,\n    textAlign: 'center',\n    textDecoration: 'none',\n    textTransform: 'uppercase'\n  }\n\n  render() {\n    const { appearance, isSolid, ...props } = this.props\n    const opacity = isSolid ? 'solid' : 'default'\n    const appearanceStyle = FillAppearances[opacity][appearance]\n    return (\n      <Strong size={300} {...Badge.styles} {...appearanceStyle} {...props} />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}