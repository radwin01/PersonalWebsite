{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label } from '../../typography';\n\nvar FormFieldLabel = function (_PureComponent) {\n  _inherits(FormFieldLabel, _PureComponent);\n\n  function FormFieldLabel() {\n    _classCallCheck(this, FormFieldLabel);\n\n    return _possibleConstructorReturn(this, (FormFieldLabel.__proto__ || Object.getPrototypeOf(FormFieldLabel)).apply(this, arguments));\n  }\n\n  _createClass(FormFieldLabel, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          isAstrixShown = _props.isAstrixShown,\n          props = _objectWithoutProperties(_props, ['children', 'isAstrixShown']);\n\n      return React.createElement(Label, _extends({\n        display: 'block'\n      }, props), children, ' ', isAstrixShown && React.createElement('span', {\n        title: 'This field is required.'\n      }, '*'));\n    }\n  }]);\n\n  return FormFieldLabel;\n}(PureComponent);\n\nFormFieldLabel.propTypes = _extends({}, Label.propTypes, {\n  /**\n   * Wether or not tho show an asterix after the label.\n   */\n  isAstrixShown: PropTypes.bool\n});\nexport default FormFieldLabel;","map":{"version":3,"sources":["../../../src/form-field/src/FormFieldLabel.js"],"names":["FormFieldLabel","PureComponent","propTypes","Label","isAstrixShown","PropTypes","bool","children","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,KAAA,QAAA,kBAAA;;IAEqBA,c;;;;;;;;;;;6BAaV;AAAA,UAAA,MAAA,GACuC,KADvC,KAAA;AAAA,UACCO,QADD,GAAA,MAAA,CAAA,QAAA;AAAA,UACWH,aADX,GAAA,MAAA,CAAA,aAAA;AAAA,UAC6BI,KAD7B,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,CAAA,CAAA;;AAEP,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,QAAA,OAAA,EAAP;AAAA,OAAA,EAAA,KAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAEGJ,aAAAA,IAAiB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,KAAA,EAAN;AAAA,OAAA,EAAA,GAAA,CAFpB,CADF;AAMD;;;;EArByCH,a;;AAAvBD,c,CACZE,SADYF,G,aAKdG,KAAAA,CAAMD,S;AAET;;;AAGAE,EAAAA,aAAAA,EAAeC,SAAAA,CAAUC;EAVRN;eAAAA,c","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Label } from '../../typography'\n\nexport default class FormFieldLabel extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Label component as the base.\n     */\n    ...Label.propTypes,\n\n    /**\n     * Wether or not tho show an asterix after the label.\n     */\n    isAstrixShown: PropTypes.bool\n  }\n\n  render() {\n    const { children, isAstrixShown, ...props } = this.props\n    return (\n      <Label display=\"block\" {...props}>\n        {children}{' '}\n        {isAstrixShown && <span title=\"This field is required.\">*</span>}\n      </Label>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}