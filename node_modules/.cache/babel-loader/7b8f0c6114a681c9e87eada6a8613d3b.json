{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/no-unused-state */\n\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nvar ScrollbarSize = function (_PureComponent) {\n  _inherits(ScrollbarSize, _PureComponent);\n\n  function ScrollbarSize() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ScrollbarSize);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollbarSize.__proto__ || Object.getPrototypeOf(ScrollbarSize)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      innerWidth: null,\n      outerWidth: null\n    }, _this.handleRef = function (ref) {\n      if (ref === null) return;\n      var outerWidth = ref.getBoundingClientRect().width;\n\n      _this.setState({\n        outerWidth: outerWidth\n      });\n    }, _this.handleInnerRef = function (ref) {\n      if (ref === null) return;\n      var innerWidth = ref.getBoundingClientRect().width;\n\n      _this.setState({\n        innerWidth: innerWidth\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ScrollbarSize, [{\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextState.innerWidth && nextState.outerWidth) {\n        this.props.handleScrollbarSize(nextState.outerWidth - nextState.innerWidth);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: this.handleRef,\n        'aria-hidden': true,\n        style: {\n          position: 'fixed',\n          top: -500,\n          left: -500,\n          width: 100,\n          overflowY: 'scroll'\n        }\n      }, React.createElement('div', {\n        ref: this.handleInnerRef\n      }));\n    }\n  }]);\n\n  return ScrollbarSize;\n}(PureComponent);\n\nScrollbarSize.propTypes = {\n  /**\n   * Returns the size of the scrollbar by creating a hidden fixed div.\n   */\n  handleScrollbarSize: PropTypes.func\n};\nScrollbarSize.defaultProps = {\n  handleScrollbarSize: function handleScrollbarSize() {}\n};\nexport default ScrollbarSize;","map":{"version":3,"sources":["../../../src/table/src/ScrollbarSize.js"],"names":["ScrollbarSize","PureComponent","propTypes","handleScrollbarSize","PropTypes","func","defaultProps","state","innerWidth","outerWidth","nextProps","nextState","handleRef","ref","handleInnerRef","position","top","left","width","overflowY"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;;IAEqBA,a;;;;;;;;;;;;;;oMAYnBO,K,GAAQ;AACNC,MAAAA,UAAAA,EADM,IAAA;AAENC,MAAAA,UAAAA,EAAY;AAFN,K,QAaRG,S,GAAY,UAAA,GAAA,EAAO;AACjB,UAAIC,GAAAA,KAAJ,IAAA,EAAkB;AAClB,UAAMJ,UAAAA,GAAaI,GAAAA,CAAAA,qBAAAA,GAAnB,KAAA;;AACA,MAAA,KAAA,CAAA,QAAA,CAAc;AACZJ,QAAAA,UAAAA,EAAAA;AADY,OAAd;aAKFK,c,GAAiB,UAAA,GAAA,EAAO;AACtB,UAAID,GAAAA,KAAJ,IAAA,EAAkB;AAClB,UAAML,UAAAA,GAAaK,GAAAA,CAAAA,qBAAAA,GAAnB,KAAA;;AACA,MAAA,KAAA,CAAA,QAAA,CAAc;AACZL,QAAAA,UAAAA,EAAAA;AADY,OAAd;;;;;;wCAnBkBE,S,EAAWC,S,EAAW;AACxC,UAAIA,SAAAA,CAAAA,UAAAA,IAAwBA,SAAAA,CAA5B,UAAA,EAAkD;AAChD,aAAA,KAAA,CAAA,mBAAA,CACEA,SAAAA,CAAAA,UAAAA,GAAuBA,SAAAA,CADzB,UAAA;AAGD;AACF;;;6BAkBQ;AACP,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,GAAA,EAAK,KADP,SAAA;AAEE,uBAFF,IAAA;AAGE,QAAA,KAAA,EAAO;AACLI,UAAAA,QAAAA,EADK,OAAA;AAELC,UAAAA,GAAAA,EAAK,CAFA,GAAA;AAGLC,UAAAA,IAAAA,EAAM,CAHD,GAAA;AAILC,UAAAA,KAAAA,EAJK,GAAA;AAKLC,UAAAA,SAAAA,EAAW;AALN;AAHT,OAAA,EAWE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,GAAA,EAAK,KAAV;AAAA,OAAA,CAXF,CADF;AAeD;;;;EAzDwClB,a;;AAAtBD,a,CACZE,SADYF,GACA;AACjB;;;AAGAG,EAAAA,mBAAAA,EAAqBC,SAAAA,CAAUC;AAJd,CADAL;AAAAA,a,CAQZM,YARYN,GAQG;AACpBG,EAAAA,mBAAAA,EAAqB,SAAA,mBAAA,GAAM,CAAE;AADT,CARHH;eAAAA,a","sourcesContent":["/* eslint-disable react/no-unused-state */\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ScrollbarSize extends PureComponent {\n  static propTypes = {\n    /**\n     * Returns the size of the scrollbar by creating a hidden fixed div.\n     */\n    handleScrollbarSize: PropTypes.func\n  }\n\n  static defaultProps = {\n    handleScrollbarSize: () => {}\n  }\n\n  state = {\n    innerWidth: null,\n    outerWidth: null\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextState.innerWidth && nextState.outerWidth) {\n      this.props.handleScrollbarSize(\n        nextState.outerWidth - nextState.innerWidth\n      )\n    }\n  }\n\n  handleRef = ref => {\n    if (ref === null) return\n    const outerWidth = ref.getBoundingClientRect().width\n    this.setState({\n      outerWidth\n    })\n  }\n\n  handleInnerRef = ref => {\n    if (ref === null) return\n    const innerWidth = ref.getBoundingClientRect().width\n    this.setState({\n      innerWidth\n    })\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.handleRef}\n        aria-hidden\n        style={{\n          position: 'fixed',\n          top: -500,\n          left: -500,\n          width: 100,\n          overflowY: 'scroll'\n        }}\n      >\n        <div ref={this.handleInnerRef} />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}