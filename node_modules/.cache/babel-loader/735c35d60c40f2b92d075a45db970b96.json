{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getClassName;\n\nvar _hash = require('@emotion/hash');\n\nvar _hash2 = _interopRequireDefault(_hash);\n\nvar _getSafeValue = require('./get-safe-value');\n\nvar _getSafeValue2 = _interopRequireDefault(_getSafeValue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Generates the class name.\n */\n\n\nfunction getClassName(propertyInfo, value) {\n  var className = propertyInfo.className,\n      _propertyInfo$safeVal = propertyInfo.safeValue,\n      safeValue = _propertyInfo$safeVal === undefined ? false : _propertyInfo$safeVal,\n      _propertyInfo$complex = propertyInfo.complexValue,\n      complexValue = _propertyInfo$complex === undefined ? false : _propertyInfo$complex;\n  var valueKey = void 0; // Shortcut the global keywords\n\n  if (value === 'inherit' || value === 'initial' || value === 'unset') {\n    valueKey = value; // Always hash values that contain a calc() because the operators get\n    // stripped which can result in class name collisions\n  } else if (complexValue || value.includes('calc(')) {\n    valueKey = (0, _hash2.default)(value);\n  } else if (safeValue) {\n    valueKey = value;\n  } else {\n    valueKey = (0, _getSafeValue2.default)(value);\n  }\n\n  return '\\uD83D\\uDCE6' + className + '_' + valueKey;\n}","map":{"version":3,"sources":["../src/get-class-name.js"],"names":["getClassName","className","safeValue","complexValue","propertyInfo","valueKey","value"],"mappings":";;;;;kBAMwBA,Y;;AANxB,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;;;;;;AAEA;;;;;AAGe,SAAA,YAAA,CAAA,YAAA,EAAA,KAAA,EAA2C;AAAA,MAEtDC,SAFsD,GAKpDG,YALoD,CAAA,SAAA;AAAA,MAAA,qBAAA,GAKpDA,YALoD,CAAA,SAAA;AAAA,MAGtDF,SAHsD,GAAA,qBAAA,KAAA,SAAA,GAAA,KAAA,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAKpDE,YALoD,CAAA,YAAA;AAAA,MAItDD,YAJsD,GAAA,qBAAA,KAAA,SAAA,GAAA,KAAA,GAAA,qBAAA;AAMxD,MAAIE,QAAAA,GAAAA,KAAJ,CAAA,CANwD,CAQxD;;AACA,MAAIC,KAAAA,KAAAA,SAAAA,IAAuBA,KAAAA,KAAvBA,SAAAA,IAA8CA,KAAAA,KAAlD,OAAA,EAAqE;AACnED,IAAAA,QAAAA,GAAAA,KAAAA,CADmE,CAEnE;AACA;AAHF,GAAA,MAIO,IAAIF,YAAAA,IAAgBG,KAAAA,CAAAA,QAAAA,CAApB,OAAoBA,CAApB,EAA6C;AAClDD,IAAAA,QAAAA,GAAW,CAAA,GAAA,MAAA,CAAA,OAAA,EAAXA,KAAW,CAAXA;AADK,GAAA,MAEA,IAAA,SAAA,EAAe;AACpBA,IAAAA,QAAAA,GAAAA,KAAAA;AADK,GAAA,MAEA;AACLA,IAAAA,QAAAA,GAAW,CAAA,GAAA,cAAA,CAAA,OAAA,EAAXA,KAAW,CAAXA;AACD;;AAED,SAAA,iBAAA,SAAA,GAAA,GAAA,GAAA,QAAA;AACD","sourcesContent":["import hash from '@emotion/hash'\nimport getSafeValue from './get-safe-value'\n\n/**\n * Generates the class name.\n */\nexport default function getClassName(propertyInfo, value) {\n  const {\n    className,\n    safeValue = false, // Value never contains unsafe characters. e.g: 10, hidden, border-box\n    complexValue = false // Complex values that are best hashed. e.g: background-image\n  } = propertyInfo\n  let valueKey\n\n  // Shortcut the global keywords\n  if (value === 'inherit' || value === 'initial' || value === 'unset') {\n    valueKey = value\n    // Always hash values that contain a calc() because the operators get\n    // stripped which can result in class name collisions\n  } else if (complexValue || value.includes('calc(')) {\n    valueKey = hash(value)\n  } else if (safeValue) {\n    valueKey = value\n  } else {\n    valueKey = getSafeValue(value)\n  }\n\n  return `ðŸ“¦${className}_${valueKey}`\n}\n"]},"metadata":{},"sourceType":"script"}