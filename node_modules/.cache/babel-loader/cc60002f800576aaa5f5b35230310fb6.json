{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport { IconMap, IconAim } from '../../icons';\nimport { getBorderRadiusForControlHeight, getTextStyleForControlHeight, getIconSizeForControlHeight } from '../../shared-styles';\nimport { Spinner } from '../../spinner';\nimport ButtonAppearances from './styles/ButtonAppearances';\n\nvar Button = function (_PureComponent) {\n  _inherits(Button, _PureComponent);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          css = _props.css,\n          height = _props.height,\n          isActive = _props.isActive,\n          children = _props.children,\n          disabled = _props.disabled,\n          appearance = _props.appearance,\n          isLoading = _props.isLoading,\n          paddingRight = _props.paddingRight,\n          paddingLeft = _props.paddingLeft,\n          paddingTop = _props.paddingTop,\n          paddingBottom = _props.paddingBottom,\n          iconBeforeKey = _props.iconBefore,\n          iconBeforeAim = _props.iconBeforeAim,\n          iconAfterKey = _props.iconAfter,\n          iconAfterAim = _props.iconAfterAim,\n          props = _objectWithoutProperties(_props, ['css', 'height', 'isActive', 'children', 'disabled', 'appearance', 'isLoading', 'paddingRight', 'paddingLeft', 'paddingTop', 'paddingBottom', 'iconBefore', 'iconBeforeAim', 'iconAfter', 'iconAfterAim']);\n\n      var appearanceStyle = ButtonAppearances[appearance];\n      var textStyle = getTextStyleForControlHeight({\n        height: height\n      });\n      var borderRadius = getBorderRadiusForControlHeight({\n        height: height\n      });\n      var iconHeight = height - 4;\n      var iconSize = getIconSizeForControlHeight({\n        height: iconHeight\n      });\n      var pr = paddingRight !== undefined ? paddingRight : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var iconBefore = void 0;\n\n      if (iconBeforeKey) {\n        iconBefore = React.createElement(IconMap[iconBeforeKey], {\n          aim: iconBeforeAim,\n          iconSize: iconSize,\n          color: 'inherit',\n          size: iconHeight,\n          marginLeft: -Math.round(pl * 0.6)\n        });\n      }\n\n      var iconAfter = void 0;\n\n      if (iconAfterKey) {\n        iconAfter = React.createElement(IconMap[iconAfterKey], {\n          aim: iconAfterAim,\n          iconSize: iconSize,\n          color: 'inherit',\n          size: iconHeight,\n          marginRight: -Math.round(pl * 0.6)\n        });\n      }\n\n      return React.createElement(Text, _extends({\n        is: 'button',\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        paddingRight: pr,\n        paddingLeft: pl,\n        margin: 0 // Removes weird margins in Safari\n\n      }, textStyle, {\n        color: null // Prevent the Text color overriding the glamor appearanceStyle color\n        ,\n        css: _extends({}, appearanceStyle, css),\n        height: height,\n        lineHeight: height + 'px'\n      }, isActive ? {\n        'data-active': true\n      } : {}, Button.styles, props, {\n        disabled: disabled || isLoading\n      }), isLoading && React.createElement(Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), iconBefore || null, React.createElement('span', null, children), iconAfter || null);\n    }\n  }]);\n\n  return Button;\n}(PureComponent);\n\nButton.propTypes = _extends({}, Text.propTypes, {\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(Object.keys(ButtonAppearances)).isRequired,\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen.\n   */\n  iconBefore: PropTypes.oneOf(Object.keys(IconMap)),\n\n  /**\n   * The aim of the left icon. Not a big use case for this.\n   */\n  iconBeforeAim: PropTypes.oneOf(Object.keys(IconAim)),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen.\n   */\n  iconAfter: PropTypes.oneOf(Object.keys(IconMap)),\n\n  /**\n   * The aim of the right icon. Useful to aim a triangle down.\n   */\n  iconAfterAim: PropTypes.oneOf(Object.keys(IconAim)),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool\n});\nButton.defaultProps = {\n  appearance: 'default',\n  isActive: false,\n  iconBeforeAim: 'none',\n  iconAfterAim: 'none',\n  height: 32,\n  paddingTop: 0,\n  paddingBottom: 0\n};\nButton.styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n};\nexport default Button;","map":{"version":3,"sources":["../../../src/buttons/src/Button.js"],"names":["Button","PureComponent","propTypes","Text","appearance","PropTypes","Object","isRequired","isLoading","bool","isActive","iconBefore","iconBeforeAim","iconAfter","iconAfterAim","disabled","defaultProps","height","paddingTop","paddingBottom","styles","position","fontFamily","fontWeight","display","alignItems","flexWrap","css","children","paddingRight","paddingLeft","iconBeforeKey","iconAfterKey","props","appearanceStyle","ButtonAppearances","textStyle","getTextStyleForControlHeight","borderRadius","getBorderRadiusForControlHeight","iconHeight","iconSize","getIconSizeForControlHeight","pr","Math","pl","IconMap","aim","color","size","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport { IconMap, IconAim } from '../../icons'\nimport {\n  getBorderRadiusForControlHeight,\n  getTextStyleForControlHeight,\n  getIconSizeForControlHeight\n} from '../../shared-styles'\nimport { Spinner } from '../../spinner'\nimport ButtonAppearances from './styles/ButtonAppearances'\n\nexport default class Button extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Text component as the base.\n     */\n    ...Text.propTypes,\n\n    /**\n     * The appearance of the button.\n     */\n    appearance: PropTypes.oneOf(Object.keys(ButtonAppearances)).isRequired,\n\n    /**\n     * When true, show a loading spinner before the children.\n     * This also disables the button.\n     */\n    isLoading: PropTypes.bool,\n\n    /**\n     * Forcefully set the active state of a button.\n     * Useful in conjuction with a Popover.\n     */\n    isActive: PropTypes.bool,\n\n    /**\n     * Sets an icon before the text. Can be any icon from Evergreen.\n     */\n    iconBefore: PropTypes.oneOf(Object.keys(IconMap)),\n\n    /**\n     * The aim of the left icon. Not a big use case for this.\n     */\n    iconBeforeAim: PropTypes.oneOf(Object.keys(IconAim)),\n\n    /**\n     * Sets an icon after the text. Can be any icon from Evergreen.\n     */\n    iconAfter: PropTypes.oneOf(Object.keys(IconMap)),\n\n    /**\n     * The aim of the right icon. Useful to aim a triangle down.\n     */\n    iconAfterAim: PropTypes.oneOf(Object.keys(IconAim)),\n\n    /**\n     * When true, the button is disabled.\n     * isLoading also sets the button to disabled.\n     */\n    disabled: PropTypes.bool\n  }\n\n  static defaultProps = {\n    appearance: 'default',\n    isActive: false,\n    iconBeforeAim: 'none',\n    iconAfterAim: 'none',\n    height: 32,\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n\n  static styles = {\n    position: 'relative',\n    fontFamily: 'ui',\n    fontWeight: 500,\n    display: 'inline-flex',\n    alignItems: 'center',\n    flexWrap: 'nowrap'\n  }\n\n  render() {\n    const {\n      css,\n      height,\n      isActive,\n      children,\n      disabled,\n      appearance,\n      isLoading,\n\n      // Paddings\n      paddingRight,\n      paddingLeft,\n      paddingTop,\n      paddingBottom,\n\n      // Icons\n      iconBefore: iconBeforeKey,\n      iconBeforeAim,\n      iconAfter: iconAfterKey,\n      iconAfterAim,\n\n      ...props\n    } = this.props\n    const appearanceStyle = ButtonAppearances[appearance]\n    const textStyle = getTextStyleForControlHeight({ height })\n    const borderRadius = getBorderRadiusForControlHeight({ height })\n    const iconHeight = height - 4\n    const iconSize = getIconSizeForControlHeight({ height: iconHeight })\n\n    const pr =\n      paddingRight !== undefined ? paddingRight : Math.round(height / 2) // eslint-disable-line no-negated-condition\n    const pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2) // eslint-disable-line no-negated-condition\n\n    let iconBefore\n    if (iconBeforeKey) {\n      iconBefore = React.createElement(IconMap[iconBeforeKey], {\n        aim: iconBeforeAim,\n        iconSize,\n        color: 'inherit',\n        size: iconHeight,\n        marginLeft: -Math.round(pl * 0.6)\n      })\n    }\n\n    let iconAfter\n    if (iconAfterKey) {\n      iconAfter = React.createElement(IconMap[iconAfterKey], {\n        aim: iconAfterAim,\n        iconSize,\n        color: 'inherit',\n        size: iconHeight,\n        marginRight: -Math.round(pl * 0.6)\n      })\n    }\n\n    return (\n      <Text\n        is=\"button\"\n        borderTopRightRadius={borderRadius}\n        borderBottomRightRadius={borderRadius}\n        borderTopLeftRadius={borderRadius}\n        borderBottomLeftRadius={borderRadius}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n        paddingRight={pr}\n        paddingLeft={pl}\n        margin={0} // Removes weird margins in Safari\n        {...textStyle}\n        color={null} // Prevent the Text color overriding the glamor appearanceStyle color\n        css={{\n          ...appearanceStyle,\n          ...css\n        }}\n        height={height}\n        lineHeight={`${height}px`}\n        {...(isActive ? { 'data-active': true } : {})}\n        {...Button.styles}\n        {...props}\n        disabled={disabled || isLoading}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        {iconBefore || null}\n        <span>{children}</span>\n        {iconAfter || null}\n      </Text>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}