{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport { getBorderRadiusForControlHeight, getTextStyleForControlHeight, InputAppearances } from '../../shared-styles';\n\nvar TextInput = function (_PureComponent) {\n  _inherits(TextInput, _PureComponent);\n\n  function TextInput() {\n    _classCallCheck(this, TextInput);\n\n    return _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).apply(this, arguments));\n  }\n\n  _createClass(TextInput, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          css = _props.css,\n          height = _props.height,\n          disabled = _props.disabled,\n          required = _props.required,\n          isInvalid = _props.isInvalid,\n          appearance = _props.appearance,\n          placeholder = _props.placeholder,\n          spellCheck = _props.spellCheck,\n          props = _objectWithoutProperties(_props, ['css', 'height', 'disabled', 'required', 'isInvalid', 'appearance', 'placeholder', 'spellCheck']);\n\n      var appearanceStyle = InputAppearances[appearance];\n      var textStyle = getTextStyleForControlHeight({\n        height: height\n      });\n      var borderRadius = getBorderRadiusForControlHeight({\n        height: height\n      });\n      return React.createElement(Text, _extends({\n        is: 'input',\n        type: 'text',\n        width: 280,\n        height: height,\n        required: required,\n        disabled: disabled,\n        placeholder: placeholder,\n        paddingLeft: Math.round(height / 3.2),\n        paddingRight: Math.round(height / 3.2),\n        borderRadius: borderRadius,\n        spellCheck: spellCheck,\n        'aria-invalid': isInvalid\n      }, disabled ? {\n        color: 'extraMuted'\n      } : {}, textStyle, {\n        css: _extends({}, css, appearanceStyle)\n      }, props));\n    }\n  }]);\n\n  return TextInput;\n}(PureComponent);\n\nTextInput.propTypes = _extends({}, Text.propTypes, {\n  /**\n   * Makes the input element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling to be invalid.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.oneOf(Object.keys(InputAppearances))\n});\nTextInput.defaultProps = {\n  appearance: 'default',\n  height: 32,\n  disabled: false,\n  isInvalid: false,\n  spellCheck: true\n};\nexport default TextInput;","map":{"version":3,"sources":["../../../src/text-input/src/TextInput.js"],"names":["TextInput","PureComponent","propTypes","Text","required","PropTypes","bool","disabled","isInvalid","spellCheck","placeholder","string","appearance","Object","defaultProps","height","css","props","appearanceStyle","InputAppearances","textStyle","getTextStyleForControlHeight","borderRadius","getBorderRadiusForControlHeight","Math","color"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport {\n  getBorderRadiusForControlHeight,\n  getTextStyleForControlHeight,\n  InputAppearances\n} from '../../shared-styles'\n\nexport default class TextInput extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Text component as the base.\n     */\n    ...Text.propTypes,\n\n    /**\n     * Makes the input element required.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * Makes the input element disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Sets visual styling to be invalid.\n     */\n    isInvalid: PropTypes.bool,\n\n    /**\n     * Use the native spell check functionality of the browser.\n     */\n    spellCheck: PropTypes.bool,\n\n    /**\n     * The placeholder text when there is no value present.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * The appearance of the TextInput.\n     */\n    appearance: PropTypes.oneOf(Object.keys(InputAppearances))\n  }\n\n  static defaultProps = {\n    appearance: 'default',\n    height: 32,\n    disabled: false,\n    isInvalid: false,\n    spellCheck: true\n  }\n\n  render() {\n    const {\n      css,\n      height,\n      disabled,\n      required,\n      isInvalid,\n      appearance,\n      placeholder,\n      spellCheck,\n      ...props\n    } = this.props\n    const appearanceStyle = InputAppearances[appearance]\n    const textStyle = getTextStyleForControlHeight({ height })\n    const borderRadius = getBorderRadiusForControlHeight({ height })\n\n    return (\n      <Text\n        is=\"input\"\n        type=\"text\"\n        width={280}\n        height={height}\n        required={required}\n        disabled={disabled}\n        placeholder={placeholder}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        borderRadius={borderRadius}\n        spellCheck={spellCheck}\n        aria-invalid={isInvalid}\n        {...(disabled ? { color: 'extraMuted' } : {})}\n        {...textStyle}\n        css={{ ...css, ...appearanceStyle }}\n        {...props}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}