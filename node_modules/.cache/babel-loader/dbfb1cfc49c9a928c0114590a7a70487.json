{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport { SearchIcon } from '../../icons';\nimport { colors } from '../../colors';\nimport TableHeaderCell from './TableHeaderCell';\nvar invisibleInput = {\n  border: 'none',\n  backgroundColor: 'transparent',\n  WebkitAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n  '&:focus': {\n    outline: 'none'\n  },\n  '&::placeholder': {\n    color: colors.neutral['100A']\n  }\n};\n\nvar SearchTableHeaderCell = function (_PureComponent) {\n  _inherits(SearchTableHeaderCell, _PureComponent);\n\n  function SearchTableHeaderCell() {\n    _classCallCheck(this, SearchTableHeaderCell);\n\n    return _possibleConstructorReturn(this, (SearchTableHeaderCell.__proto__ || Object.getPrototypeOf(SearchTableHeaderCell)).apply(this, arguments));\n  }\n\n  _createClass(SearchTableHeaderCell, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          value = _props.value,\n          children = _props.children,\n          _onChange = _props.onChange,\n          autoFocus = _props.autoFocus,\n          spellCheck = _props.spellCheck,\n          placeholder = _props.placeholder,\n          props = _objectWithoutProperties(_props, ['value', 'children', 'onChange', 'autoFocus', 'spellCheck', 'placeholder']);\n\n      return React.createElement(TableHeaderCell, props, React.createElement(SearchIcon, {\n        marginLeft: -8,\n        marginTop: -0.5,\n        iconSize: 12\n      }), React.createElement(Text, {\n        is: 'input',\n        size: 300,\n        flex: '1',\n        css: invisibleInput,\n        value: value,\n        onChange: function onChange(e) {\n          return _onChange(e.target.value);\n        },\n        autoFocus: autoFocus,\n        spellCheck: spellCheck,\n        fontWeight: 500,\n        marginLeft: -2,\n        paddingLeft: 0,\n        placeholder: placeholder\n      }));\n    }\n  }]);\n\n  return SearchTableHeaderCell;\n}(PureComponent);\n\nSearchTableHeaderCell.propTypes = _extends({}, TableHeaderCell.propTypes, {\n  /**\n   * The value of the input.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Handler to be called when the input changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Sets whether the component should be automatically focused on component render.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Sets whether to apply spell checking to the content.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Text to display in the input if the input is empty.\n   */\n  placeholder: PropTypes.string\n});\nSearchTableHeaderCell.defaultProps = {\n  onChange: function onChange() {},\n  spellCheck: true,\n  placeholder: 'Filter...'\n};\nexport default SearchTableHeaderCell;","map":{"version":3,"sources":["../../../src/table/src/SearchTableHeaderCell.js"],"names":["invisibleInput","border","backgroundColor","WebkitAppearance","WebkitFontSmoothing","outline","color","colors","SearchTableHeaderCell","PureComponent","propTypes","TableHeaderCell","value","PropTypes","string","onChange","func","autoFocus","bool","spellCheck","placeholder","defaultProps","children","props","e"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,SAAA,UAAA,QAAA,aAAA;AACA,SAAA,MAAA,QAAA,cAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,IAAMA,cAAAA,GAAiB;AACrBC,EAAAA,MAAAA,EADqB,MAAA;AAErBC,EAAAA,eAAAA,EAFqB,aAAA;AAGrBC,EAAAA,gBAAAA,EAHqB,MAAA;AAIrBC,EAAAA,mBAAAA,EAJqB,aAAA;AAMrB,aAAW;AACTC,IAAAA,OAAAA,EAAS;AADA,GANU;AAUrB,oBAAkB;AAChBC,IAAAA,KAAAA,EAAOC,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA;AADS;AAVG,CAAvB;;IAeqBC,qB;;;;;;;;;;;6BAuCV;AAAA,UAAA,MAAA,GASH,KATG,KAAA;AAAA,UAELI,KAFK,GAAA,MAAA,CAAA,KAAA;AAAA,UAGLU,QAHK,GAAA,MAAA,CAAA,QAAA;AAAA,UAILP,SAJK,GAAA,MAAA,CAAA,QAAA;AAAA,UAKLE,SALK,GAAA,MAAA,CAAA,SAAA;AAAA,UAMLE,UANK,GAAA,MAAA,CAAA,UAAA;AAAA,UAOLC,WAPK,GAAA,MAAA,CAAA,WAAA;AAAA,UAQFG,KARE,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,aAAA,CAAA,CAAA;;AAWP,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,QAAA,UAAA,EAAY,CAAxB,CAAA;AAA4B,QAAA,SAAA,EAAW,CAAvC,GAAA;AAA6C,QAAA,QAAA,EAD/C;AACE,OAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,EAAA,EADF,OAAA;AAEE,QAAA,IAAA,EAFF,GAAA;AAGE,QAAA,IAAA,EAHF,GAAA;AAIE,QAAA,GAAA,EAJF,cAAA;AAKE,QAAA,KAAA,EALF,KAAA;AAME,QAAA,QAAA,EAAU,SAAA,QAAA,CAAA,CAAA,EAAA;AAAA,iBAAKR,SAAAA,CAASS,CAAAA,CAAAA,MAAAA,CAAd,KAAKT,CAAL;AANZ,SAAA;AAOE,QAAA,SAAA,EAPF,SAAA;AAQE,QAAA,UAAA,EARF,UAAA;AASE,QAAA,UAAA,EATF,GAAA;AAUE,QAAA,UAAA,EAAY,CAVd,CAAA;AAWE,QAAA,WAAA,EAXF,CAAA;AAYE,QAAA,WAAA,EAAaK;AAZf,OAAA,CAFF,CADF;AAmBD;;;;EArEgDX,a;;AAA9BD,qB,CACZE,SADYF,G,aAKdG,eAAAA,CAAgBD,S;AAEnB;;;AAGAE,EAAAA,KAAAA,EAAOC,SAAAA,CAAUC,M;;AAEjB;;;AAGAC,EAAAA,QAAAA,EAAUF,SAAAA,CAAUG,I;;AAEpB;;;AAGAC,EAAAA,SAAAA,EAAWJ,SAAAA,CAAUK,I;;AAErB;;;AAGAC,EAAAA,UAAAA,EAAYN,SAAAA,CAAUK,I;;AAEtB;;;AAGAE,EAAAA,WAAAA,EAAaP,SAAAA,CAAUC;EA9BNN;AAAAA,qB,CAiCZa,YAjCYb,GAiCG;AACpBO,EAAAA,QAAAA,EAAU,SAAA,QAAA,GAAM,CADI,CAAA;AAEpBI,EAAAA,UAAAA,EAFoB,IAAA;AAGpBC,EAAAA,WAAAA,EAAa;AAHO,CAjCHZ;eAAAA,qB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport { SearchIcon } from '../../icons'\nimport { colors } from '../../colors'\nimport TableHeaderCell from './TableHeaderCell'\n\nconst invisibleInput = {\n  border: 'none',\n  backgroundColor: 'transparent',\n  WebkitAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n\n  '&:focus': {\n    outline: 'none'\n  },\n\n  '&::placeholder': {\n    color: colors.neutral['100A']\n  }\n}\n\nexport default class SearchTableHeaderCell extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableHeaderCell component as the base.\n     */\n    ...TableHeaderCell.propTypes,\n\n    /**\n     * The value of the input.\n     */\n    value: PropTypes.string,\n\n    /**\n     * Handler to be called when the input changes.\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * Sets whether the component should be automatically focused on component render.\n     */\n    autoFocus: PropTypes.bool,\n\n    /**\n     * Sets whether to apply spell checking to the content.\n     */\n    spellCheck: PropTypes.bool,\n\n    /**\n     * Text to display in the input if the input is empty.\n     */\n    placeholder: PropTypes.string\n  }\n\n  static defaultProps = {\n    onChange: () => {},\n    spellCheck: true,\n    placeholder: 'Filter...'\n  }\n\n  render() {\n    const {\n      value,\n      children,\n      onChange,\n      autoFocus,\n      spellCheck,\n      placeholder,\n      ...props\n    } = this.props\n\n    return (\n      <TableHeaderCell {...props}>\n        <SearchIcon marginLeft={-8} marginTop={-0.5} iconSize={12} />\n        <Text\n          is=\"input\"\n          size={300}\n          flex=\"1\"\n          css={invisibleInput}\n          value={value}\n          onChange={e => onChange(e.target.value)}\n          autoFocus={autoFocus}\n          spellCheck={spellCheck}\n          fontWeight={500}\n          marginLeft={-2}\n          paddingLeft={0}\n          placeholder={placeholder}\n        />\n      </TableHeaderCell>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}