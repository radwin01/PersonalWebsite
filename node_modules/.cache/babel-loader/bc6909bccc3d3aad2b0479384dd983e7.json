{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = getCss;\n\nvar _prefixer = require('./prefixer');\n\nvar _prefixer2 = _interopRequireDefault(_prefixer);\n\nvar _valueToString = require('./value-to-string');\n\nvar _valueToString2 = _interopRequireDefault(_valueToString);\n\nvar _getClassName = require('./get-class-name');\n\nvar _getClassName2 = _interopRequireDefault(_getClassName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Generates the class name and styles.\n */\n\n\nfunction getCss(propertyInfo, value) {\n  var rules = void 0; // Protect against unexpected values\n\n  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      var name = propertyInfo.jsName;\n      var encodedValue = JSON.stringify(value);\n      console.error('\\uD83D\\uDCE6 ui-box: property \\u201C' + name + '\\u201D was passed invalid value \\u201C' + encodedValue + '\\u201D. Only numbers and strings are supported.');\n    }\n\n    return null;\n  }\n\n  var valueString = (0, _valueToString2.default)(value, propertyInfo.defaultUnit);\n  var className = (0, _getClassName2.default)(propertyInfo, valueString); // Avoid running the prefixer when possible because it's slow\n\n  if (propertyInfo.isPrefixed) {\n    rules = (0, _prefixer2.default)(propertyInfo.jsName, valueString);\n  } else {\n    rules = [{\n      property: propertyInfo.cssName,\n      value: valueString\n    }];\n  }\n\n  var styles = void 0;\n\n  if (process.env.NODE_ENV === 'production') {\n    var rulesString = rules.map(function (rule) {\n      return rule.property + ':' + rule.value;\n    }).join(';');\n    styles = '.' + className + '{' + rulesString + '}';\n  } else {\n    var _rulesString = rules.map(function (rule) {\n      return '  ' + rule.property + ': ' + rule.value + ';';\n    }).join('\\n');\n\n    styles = '\\n.' + className + ' {\\n' + _rulesString + '\\n}';\n  }\n\n  return {\n    className: className,\n    styles: styles\n  };\n}","map":{"version":3,"sources":["../src/get-css.js"],"names":["getCss","rules","valueType","process","name","propertyInfo","encodedValue","JSON","console","valueString","className","property","value","styles","rulesString","rule"],"mappings":";;;;;;;;;;;;kBAOwBA,M;;AAPxB,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;;;;;;AAEA;;;;;AAGe,SAAA,MAAA,CAAA,YAAA,EAAA,KAAA,EAAqC;AAClD,MAAIC,KAAAA,GAAAA,KAAJ,CAAA,CADkD,CAGlD;;AACA,MAAMC,SAAAA,GAAAA,OAAAA,KAAAA,KAAAA,WAAAA,GAAAA,WAAAA,GAAAA,OAAAA,CAAN,KAAMA,CAAN;;AACA,MAAIA,SAAAA,KAAAA,QAAAA,IAA0BA,SAAAA,KAA9B,QAAA,EAAsD;AACpD,QAAIC,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,UAAMC,IAAAA,GAAOC,YAAAA,CAAb,MAAA;AACA,UAAMC,YAAAA,GAAeC,IAAAA,CAAAA,SAAAA,CAArB,KAAqBA,CAArB;AACAC,MAAAA,OAAAA,CAAAA,KAAAA,CAAAA,yCAAAA,IAAAA,GAAAA,wCAAAA,GAAAA,YAAAA,GAAAA,iDAAAA;AAGD;;AACD,WAAA,IAAA;AACD;;AAED,MAAMC,WAAAA,GAAc,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,KAAA,EAAqBJ,YAAAA,CAAzC,WAAoB,CAApB;AAEA,MAAMK,SAAAA,GAAY,CAAA,GAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAlB,WAAkB,CAAlB,CAlBkD,CAoBlD;;AACA,MAAIL,YAAAA,CAAJ,UAAA,EAA6B;AAC3BJ,IAAAA,KAAAA,GAAQ,CAAA,GAAA,UAAA,CAAA,OAAA,EAASI,YAAAA,CAAT,MAAA,EAARJ,WAAQ,CAARA;AADF,GAAA,MAEO;AACLA,IAAAA,KAAAA,GAAQ,CAAC;AAACU,MAAAA,QAAAA,EAAUN,YAAAA,CAAX,OAAA;AAAiCO,MAAAA,KAAAA,EAA1CX;AAAS,KAAD,CAARA;AACD;;AAED,MAAIY,MAAAA,GAAAA,KAAJ,CAAA;;AACA,MAAIV,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,QAAMW,WAAAA,GAAc,KAAA,CAAA,GAAA,CACb,UAAA,IAAA,EAAA;AAAA,aAAWC,IAAAA,CAAX,QAAWA,GAAX,GAAWA,GAAiBA,IAAAA,CAA5B,KAAA;AADa,KAAA,EAAA,IAAA,CAApB,GAAoB,CAApB;AAGAF,IAAAA,MAAAA,GAAAA,MAAAA,SAAAA,GAAAA,GAAAA,GAAAA,WAAAA,GAAAA,GAAAA;AAJF,GAAA,MAKO;AACL,QAAMC,YAAAA,GAAc,KAAA,CAAA,GAAA,CACb,UAAA,IAAA,EAAA;AAAA,aAAA,OAAaC,IAAAA,CAAb,QAAA,GAAA,IAAA,GAA+BA,IAAAA,CAA/B,KAAA,GAAA,GAAA;AADa,KAAA,EAAA,IAAA,CAApB,IAAoB,CAApB;;AAGAF,IAAAA,MAAAA,GAAAA,QAAAA,SAAAA,GAAAA,MAAAA,GAAAA,YAAAA,GAAAA,KAAAA;AAID;;AAED,SAAO;AAACH,IAAAA,SAAAA,EAAD,SAAA;AAAYG,IAAAA,MAAAA,EAAnB;AAAO,GAAP;AACD","sourcesContent":["import prefixer from './prefixer'\nimport valueToString from './value-to-string'\nimport getClassName from './get-class-name'\n\n/**\n * Generates the class name and styles.\n */\nexport default function getCss(propertyInfo, value) {\n  let rules\n\n  // Protect against unexpected values\n  const valueType = typeof value\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      const name = propertyInfo.jsName\n      const encodedValue = JSON.stringify(value)\n      console.error(\n        `📦 ui-box: property “${name}” was passed invalid value “${encodedValue}”. Only numbers and strings are supported.`\n      )\n    }\n    return null\n  }\n\n  const valueString = valueToString(value, propertyInfo.defaultUnit)\n\n  const className = getClassName(propertyInfo, valueString)\n\n  // Avoid running the prefixer when possible because it's slow\n  if (propertyInfo.isPrefixed) {\n    rules = prefixer(propertyInfo.jsName, valueString)\n  } else {\n    rules = [{property: propertyInfo.cssName, value: valueString}]\n  }\n\n  let styles\n  if (process.env.NODE_ENV === 'production') {\n    const rulesString = rules\n      .map(rule => `${rule.property}:${rule.value}`)\n      .join(';')\n    styles = `.${className}{${rulesString}}`\n  } else {\n    const rulesString = rules\n      .map(rule => `  ${rule.property}: ${rule.value};`)\n      .join('\\n')\n    styles = `\n.${className} {\n${rulesString}\n}`\n  }\n\n  return {className, styles}\n}\n"]},"metadata":{},"sourceType":"script"}