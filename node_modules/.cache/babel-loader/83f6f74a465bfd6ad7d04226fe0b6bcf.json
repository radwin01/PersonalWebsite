{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport FontFamilies from './styles/FontFamilies';\nimport TextStyles from './styles/TextStyles';\nimport TextUppercaseStyles from './styles/TextUppercaseStyles';\nimport TextColors from './styles/TextColors';\nvar isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n\nvar Text = function (_PureComponent) {\n  _inherits(Text, _PureComponent);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));\n  }\n\n  _createClass(Text, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          size = _props.size,\n          color = _props.color,\n          textStyles = _props.textStyles,\n          textUppercaseStyles = _props.textUppercaseStyles,\n          fontFamily = _props.fontFamily,\n          isUppercase = _props.isUppercase,\n          props = _objectWithoutProperties(_props, ['size', 'color', 'textStyles', 'textUppercaseStyles', 'fontFamily', 'isUppercase']);\n\n      var textStyle = textStyles[size];\n\n      if (isUppercase) {\n        // Only 100 and 200 support uppercase styles atm\n        // Fallback on non uppercase atm\n        if (Object.prototype.hasOwnProperty.call(textUppercaseStyles, size)) {\n          textStyle = textUppercaseStyles[size];\n        } else if (isDev) {\n          console.error('Uppercase ' + size + ' not supported. <Text isUppercase> only supports the following sizes: ' + JSON.stringify(Object.keys(textUppercaseStyles).map(Number)));\n        }\n      }\n\n      return React.createElement(Box, _extends({\n        is: 'span'\n      }, color ? {\n        color: TextColors[color] || color\n      } : {}, {\n        fontFamily: FontFamilies[fontFamily] || fontFamily\n      }, textStyle, props));\n    }\n  }]);\n\n  return Text;\n}(PureComponent);\n\nText.propTypes = _extends({}, Box.propTypes, {\n  size: PropTypes.oneOf(Object.keys(TextStyles).map(Number)),\n  fontFamily: PropTypes.oneOf(Object.keys(FontFamilies)),\n  textStyles: PropTypes.object,\n  textUppercaseStyles: PropTypes.object,\n  isUppercase: PropTypes.bool\n});\nText.defaultProps = {\n  size: 500,\n  color: 'default',\n  fontFamily: 'ui',\n  textStyles: TextStyles,\n  textUppercaseStyles: TextUppercaseStyles\n};\nexport default Text;","map":{"version":3,"sources":["../../../src/typography/src/Text.js"],"names":["isDev","process","Text","PureComponent","propTypes","Box","size","PropTypes","Object","fontFamily","textStyles","object","textUppercaseStyles","isUppercase","bool","defaultProps","color","TextUppercaseStyles","props","textStyle","console","JSON","TextColors","FontFamilies"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport FontFamilies from './styles/FontFamilies'\nimport TextStyles from './styles/TextStyles'\nimport TextUppercaseStyles from './styles/TextUppercaseStyles'\nimport TextColors from './styles/TextColors'\n\nconst isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV\n\nexport default class Text extends PureComponent {\n  static propTypes = {\n    ...Box.propTypes,\n    size: PropTypes.oneOf(Object.keys(TextStyles).map(Number)),\n    fontFamily: PropTypes.oneOf(Object.keys(FontFamilies)),\n    textStyles: PropTypes.object,\n    textUppercaseStyles: PropTypes.object,\n    isUppercase: PropTypes.bool\n  }\n\n  static defaultProps = {\n    size: 500,\n    color: 'default',\n    fontFamily: 'ui',\n    textStyles: TextStyles,\n    textUppercaseStyles: TextUppercaseStyles\n  }\n\n  render() {\n    const {\n      size,\n      color,\n      textStyles,\n      textUppercaseStyles,\n      fontFamily,\n      isUppercase,\n      ...props\n    } = this.props\n\n    let textStyle = textStyles[size]\n\n    if (isUppercase) {\n      // Only 100 and 200 support uppercase styles atm\n      // Fallback on non uppercase atm\n      if (Object.prototype.hasOwnProperty.call(textUppercaseStyles, size)) {\n        textStyle = textUppercaseStyles[size]\n      } else if (isDev) {\n        console.error(\n          `Uppercase ${size} not supported. <Text isUppercase> only supports the following sizes: ${JSON.stringify(\n            Object.keys(textUppercaseStyles).map(Number)\n          )}`\n        )\n      }\n    }\n\n    return (\n      <Box\n        is=\"span\"\n        {...(color ? { color: TextColors[color] || color } : {})}\n        fontFamily={FontFamilies[fontFamily] || fontFamily}\n        {...textStyle}\n        {...props}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}