{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { splitBoxProps } from 'ui-box';\nimport { FormField } from '../../form-field';\nimport TextInput from './TextInput';\nvar idCounter = 0;\n\nvar TextInputField = function (_PureComponent) {\n  _inherits(TextInputField, _PureComponent);\n\n  function TextInputField(props) {\n    _classCallCheck(this, TextInputField);\n\n    var _this = _possibleConstructorReturn(this, (TextInputField.__proto__ || Object.getPrototypeOf(TextInputField)).call(this, props));\n\n    _this.state = {\n      id: (props.id || idCounter++).toString()\n    };\n    return _this;\n  }\n\n  _createClass(TextInputField, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          unusedId = _props.id,\n          label = _props.label,\n          description = _props.description,\n          validationMessage = _props.validationMessage,\n          inputHeight = _props.inputHeight,\n          inputWidth = _props.inputWidth,\n          disabled = _props.disabled,\n          required = _props.required,\n          isInvalid = _props.isInvalid,\n          appearance = _props.appearance,\n          placeholder = _props.placeholder,\n          spellCheck = _props.spellCheck,\n          props = _objectWithoutProperties(_props, ['id', 'label', 'description', 'validationMessage', 'inputHeight', 'inputWidth', 'disabled', 'required', 'isInvalid', 'appearance', 'placeholder', 'spellCheck']);\n\n      var id = this.state.id;\n      /**\n       * Split the wrapper props from the input props.\n       */\n\n      var _splitBoxProps = splitBoxProps(props),\n          matchedProps = _splitBoxProps.matchedProps,\n          remainingProps = _splitBoxProps.remainingProps;\n\n      return React.createElement(FormField, _extends({\n        marginBottom: 24,\n        label: label,\n        isRequired: required,\n        description: description,\n        validationMessage: validationMessage,\n        labelFor: id\n      }, matchedProps), React.createElement(TextInput, _extends({\n        id: id,\n        width: inputWidth,\n        height: inputHeight,\n        disabled: disabled,\n        required: required,\n        isInvalid: isInvalid,\n        appearance: appearance,\n        placeholder: placeholder,\n        spellCheck: spellCheck\n      }, remainingProps)));\n    }\n  }]);\n\n  return TextInputField;\n}(PureComponent);\n\nTextInputField.propTypes = _extends({}, TextInput.propTypes, FormField.propTypes, {\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\nTextInputField.defaultProps = {\n  /**\n   * The input width should be as wide as the form field.\n   */\n  inputWidth: '100%',\n\n  /**\n   * Increase the height somewhat from 32 because we are dealing mainly\n   * with traditional long style forms.\n   */\n  inputHeight: 36\n};\nexport default TextInputField;","map":{"version":3,"sources":["../../../src/text-input/src/TextInputField.js"],"names":["idCounter","TextInputField","PureComponent","propTypes","TextInput","FormField","inputHeight","PropTypes","number","inputWidth","defaultProps","id","props","unusedId","label","description","validationMessage","disabled","required","isInvalid","appearance","placeholder","spellCheck","matchedProps","remainingProps","splitBoxProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { splitBoxProps } from 'ui-box'\nimport { FormField } from '../../form-field'\nimport TextInput from './TextInput'\n\nlet idCounter = 0\n\nexport default class TextInputField extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TextInput component as the base.\n     */\n    ...TextInput.propTypes,\n    ...FormField.propTypes,\n\n    /**\n     * The height of the input element.\n     */\n    inputHeight: PropTypes.number,\n\n    /**\n     * The width of the input width.\n     */\n    inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  }\n\n  static defaultProps = {\n    /**\n     * The input width should be as wide as the form field.\n     */\n    inputWidth: '100%',\n\n    /**\n     * Increase the height somewhat from 32 because we are dealing mainly\n     * with traditional long style forms.\n     */\n    inputHeight: 36\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      id: (props.id || idCounter++).toString()\n    }\n  }\n\n  render() {\n    const {\n      // We are using the id from the state\n      id: unusedId,\n\n      // FormField props\n      label,\n      description,\n      validationMessage,\n\n      // TextInput props\n      inputHeight,\n      inputWidth,\n      disabled,\n      required,\n      isInvalid,\n      appearance,\n      placeholder,\n      spellCheck,\n\n      // Rest props are spread on the FormField\n      ...props\n    } = this.props\n\n    const { id } = this.state\n\n    /**\n     * Split the wrapper props from the input props.\n     */\n    const { matchedProps, remainingProps } = splitBoxProps(props)\n\n    return (\n      <FormField\n        marginBottom={24}\n        label={label}\n        isRequired={required}\n        description={description}\n        validationMessage={validationMessage}\n        labelFor={id}\n        {...matchedProps}\n      >\n        <TextInput\n          id={id}\n          width={inputWidth}\n          height={inputHeight}\n          disabled={disabled}\n          required={required}\n          isInvalid={isInvalid}\n          appearance={appearance}\n          placeholder={placeholder}\n          spellCheck={spellCheck}\n          {...remainingProps}\n        />\n      </FormField>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}